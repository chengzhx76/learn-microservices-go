package test

import (
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"github.com/tjfoc/gmsm/gmtls"
	"github.com/tjfoc/gmsm/sm2"
	"testing"
)

var (
	authFileKey  = "D:\\golang\\src\\learn-microservices-go\\gmtls\\certs2\\client-gm-auth-key.pem"
	authFileCert = "D:\\golang\\src\\learn-microservices-go\\gmtls\\certs2\\client-gm-auth-cert.crt"
)

func TestSm2_sign(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	priKey, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}

	digestBytes, err := hex.DecodeString("29609fb61f34fe9b207716c7d56cf05200a7d411a2d7c0e739af72b5db0104f7")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	signBytes, err := priKey.Sign(rand.Reader, digestBytes, nil)
	sigHex := hex.EncodeToString(signBytes)
	fmt.Printf("========sigHex======> client sig hex = %v\n", sigHex)

}

func TestSm2_verify(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	priKey, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}
	pubKey := &priKey.PublicKey

	msgBytes, err := hex.DecodeString("0100002b010164ccd740de1cab49f58f3e35f98209e7cd123f0d9e23ed8fe57ea0019ebd4b47000004e013008001000200002601017c97cff3e1192a5aeea22544bec9682b0aee46edf1ba758fe21a72da3679eb8100e013000b0002d50002d20001663082016230820107a0030201020209008badaefb0a754820300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d034200040f48d135714a16e15e94f71e951634c37d6bcc47607538f3d009d812f9c6e8bf686f67a8f82fc489612d2420c9979d634c73b2de4613d94859fe1a29759dd803a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100a094586ff4135972656ae8bedbadf3f46d30433743f420b1a34967d0c783d86b022100d190c8fb164e849c89a9888b8e3934c633a5a810d67e4ad7b52320ffdca9a1e30001663082016230820107a0030201020209008badaefb0a754821300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004263968536c55339656f63e9e7d6684312947e8a5e1794dbad27789d00f9e41e7c6d2c70d2443dc9d3111d21b979193fdadc6a830b7a30618b2548a2937145f73a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100dbe871260369f210f34142c34d6a3e05d5df0ebeef74dd361b271353536eec42022100c9b91d92c31a9ae6ab6fe7b93837208b94b56e8f388179574e64e2593f7b7bb00c000049004730450220170586959791acfb29b8cff73fc41017e9dcc2d2b97df34fd448a0b9ab69fd59022100cc8b896519ac0ed16ddeb2392870e46fd13778df1bf7821beff272447a43740e0d00001c0201400017001530133111300f06035504030c086d7963612e636f6d0e0000000b0002cd0002ca0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab1000009d009b308198022042238d8a93d1112456cfb51e7d14829e3ebb2113ff3f5ff73759d4a2bf34f79d022020cdbc13658a41d24b942165de47ecf3eca1d917ddb36cfa5749c5b82eba287204200d9da3e1d296d968a5c92a6a3f77bfe553d7eea7ffdd1124b8d4cf72574a1de5043022c6a72be632988754c100df70355253989a0d6752d2f58a33d5b89bf4628035f77bccf10a90aed0de8eb61cac7cb126")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	signBytes, err := hex.DecodeString("3046022100f906a512f8fbaf1d5d3b076a5625737bb38c63ccf189692047f20dc291f47ed8022100cda5dd3ed74f47901f82de63a1a02c8a687b71ab9576d618224ece0121906b6c")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	ok = pubKey.Verify(msgBytes, signBytes) // 公钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}
}

func TestSm2(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	if err != nil {
		t.Fatal(err)
	}
	priv, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}
	//msg := []byte("123456")
	//
	//msgHex := hex.EncodeToString(msg)
	//fmt.Printf("msg hex text = %v\n", msgHex)

	msg, err := hex.DecodeString("29609fb61f34fe9b207716c7d56cf05200a7d411a2d7c0e739af72b5db0104f7")

	sign, err := priv.Sign(rand.Reader, msg, nil) // 签名
	if err != nil {
		t.Fatal(err)
	}

	signHex := hex.EncodeToString(sign)
	fmt.Printf("sign hex text = %v\n", signHex)

	signdata, err := hex.DecodeString(signHex)

	pubKey := priv.PublicKey
	ok = pubKey.Verify(msg, signdata) // 公钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}

	/*ok = priv.PublicKey.Verify(msg, signdata) // 密钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}*/

}
