package test

import (
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"github.com/tjfoc/gmsm/gmtls"
	"github.com/tjfoc/gmsm/sm2"
	"github.com/tjfoc/gmsm/x509"
	"testing"
)

var (
	authFileKey  = "D:\\golang\\src\\learn-microservices-go\\gmtls\\certs2\\client-gm-auth-key.pem"
	authFileCert = "D:\\golang\\src\\learn-microservices-go\\gmtls\\certs2\\client-gm-auth-cert.crt"
)

func TestSm2_sign(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	priKey, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}

	digestBytes, err := hex.DecodeString("29609fb61f34fe9b207716c7d56cf05200a7d411a2d7c0e739af72b5db0104f7")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	signBytes, err := priKey.Sign(rand.Reader, digestBytes, nil)
	sigHex := hex.EncodeToString(signBytes)
	fmt.Printf("========sigHex======> client sig hex = %v\n", sigHex)

}

func TestSm2_verify(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	priKey, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}
	pubKey := &priKey.PublicKey

	msgBytes, err := hex.DecodeString("0100002b010164d048ad4742acfd888e3d135262181ec694ab7401f1b271df9eaf27e577752b000004e013008001000200002601012ae506ba63323fabb9172b6719f5dc303ef636717b8b595b100e19ce0796e76100e013000b0002d50002d20001663082016230820107a0030201020209008badaefb0a754820300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d034200040f48d135714a16e15e94f71e951634c37d6bcc47607538f3d009d812f9c6e8bf686f67a8f82fc489612d2420c9979d634c73b2de4613d94859fe1a29759dd803a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100a094586ff4135972656ae8bedbadf3f46d30433743f420b1a34967d0c783d86b022100d190c8fb164e849c89a9888b8e3934c633a5a810d67e4ad7b52320ffdca9a1e30001663082016230820107a0030201020209008badaefb0a754821300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004263968536c55339656f63e9e7d6684312947e8a5e1794dbad27789d00f9e41e7c6d2c70d2443dc9d3111d21b979193fdadc6a830b7a30618b2548a2937145f73a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100dbe871260369f210f34142c34d6a3e05d5df0ebeef74dd361b271353536eec42022100c9b91d92c31a9ae6ab6fe7b93837208b94b56e8f388179574e64e2593f7b7bb00c000049004730450220727f53044cd852c60b1f5a7b72aa0d56b82929bf17b46c6be058ab2f2f6839f80221009bf025dce5cd6c7e3d35ad1427a557bc60b4111a9ff87c5e66da7349ed96f8ec0d00001c0201400017001530133111300f06035504030c086d7963612e636f6d0e0000000b0002cd0002ca0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab1000009e009c308199022068d146dd3cfb21b4f88faf933644ed62a713e662376273ccdb16285c0568072b022100b7f1aa567481ffb1dcaefddec956e0e8c5cf1091a4836e14493a8ac48d3f3c45042011fc1ca9b76d9be92370dda69f1a8bbc0debdcd0374675f6238eb8a4b523c2d90430dcbe9aea55332be19f407f6be04e331f71c5d2f6cec75e452727d00822ab4fd826b98adf55366ffc96a7906583f64684")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	signBytes, err := hex.DecodeString("3046022100971eb1099ee44a8b01244ddd1351645aaa36bb6afed19edc78a83f52e1816a21022100e3cf31ab47288911379fe1619ebe18ce6f1c8e699ec6f355c86f2b57455329ab")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	ok = pubKey.Verify(msgBytes, signBytes) // 公钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}
}

func TestSm2_pubkey_verify(t *testing.T) {
	var pemPublicKey = `
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEz7YFJFvDnFxDS/tICU17a6vQYwy7
Uza7jYdWrQ0F3wVhSF6uzjoEcTtMUxjDD7h2j/G/FmpyM2tJc6PfhT2pAw==
-----END PUBLIC KEY-----
`
	pubKey, err := x509.ReadPublicKeyFromPem([]byte(pemPublicKey)) // 读取密钥
	if err != nil {
		t.Fatal(err)
	}
	msgBytes, err := hex.DecodeString("0100002b010164d048ad4742acfd888e3d135262181ec694ab7401f1b271df9eaf27e577752b000004e013008001000200002601012ae506ba63323fabb9172b6719f5dc303ef636717b8b595b100e19ce0796e76100e013000b0002d50002d20001663082016230820107a0030201020209008badaefb0a754820300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d034200040f48d135714a16e15e94f71e951634c37d6bcc47607538f3d009d812f9c6e8bf686f67a8f82fc489612d2420c9979d634c73b2de4613d94859fe1a29759dd803a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100a094586ff4135972656ae8bedbadf3f46d30433743f420b1a34967d0c783d86b022100d190c8fb164e849c89a9888b8e3934c633a5a810d67e4ad7b52320ffdca9a1e30001663082016230820107a0030201020209008badaefb0a754821300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30123110300e06035504030c07756d662e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004263968536c55339656f63e9e7d6684312947e8a5e1794dbad27789d00f9e41e7c6d2c70d2443dc9d3111d21b979193fdadc6a830b7a30618b2548a2937145f73a345304330120603551d11040b30098207756d662e636f6d301d0603551d250416301406082b0601050507030206082b06010505070301300e0603551d0f0101ff0404030205a0300a06082a811ccf550183750349003046022100dbe871260369f210f34142c34d6a3e05d5df0ebeef74dd361b271353536eec42022100c9b91d92c31a9ae6ab6fe7b93837208b94b56e8f388179574e64e2593f7b7bb00c000049004730450220727f53044cd852c60b1f5a7b72aa0d56b82929bf17b46c6be058ab2f2f6839f80221009bf025dce5cd6c7e3d35ad1427a557bc60b4111a9ff87c5e66da7349ed96f8ec0d00001c0201400017001530133111300f06035504030c086d7963612e636f6d0e0000000b0002cd0002ca0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab0001623082015e30820105a0030201020209008badaefb0a754822300a06082a811ccf5501837530133111300f06035504030c086d7963612e636f6d301e170d3233303732363039333731325a170d3337303430333039333731325a30163114301206035504030c0b636c69656e74312e636f6d3059301306072a8648ce3d020106082a811ccf5501822d03420004cfb605245bc39c5c434bfb48094d7b6babd0630cbb5336bb8d8756ad0d05df0561485eaece3a04713b4c5318c30fb8768ff1bf166a72336b4973a3df853da903a33f303d30160603551d11040f300d820b636c69656e74312e636f6d30130603551d25040c300a06082b06010505070302300e0603551d0f0101ff0404030205a0300a06082a811ccf55018375034700304402203fb727be066a38b81488a0d016b5dd516c902af247350bf93cab2899fd33dc2d022077d75f7939b31dcd72aed08428fd1e7a8356a159039b6829f6f2c33c8f3c1dab1000009e009c308199022068d146dd3cfb21b4f88faf933644ed62a713e662376273ccdb16285c0568072b022100b7f1aa567481ffb1dcaefddec956e0e8c5cf1091a4836e14493a8ac48d3f3c45042011fc1ca9b76d9be92370dda69f1a8bbc0debdcd0374675f6238eb8a4b523c2d90430dcbe9aea55332be19f407f6be04e331f71c5d2f6cec75e452727d00822ab4fd826b98adf55366ffc96a7906583f64684")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}

	signBytes, err := hex.DecodeString("3046022100971eb1099ee44a8b01244ddd1351645aaa36bb6afed19edc78a83f52e1816a21022100e3cf31ab47288911379fe1619ebe18ce6f1c8e699ec6f355c86f2b57455329ab")
	if err != nil {
		fmt.Printf("Error: hex decode")
		return
	}
	ok := pubKey.Verify(msgBytes, signBytes)
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}
}

func TestSm2(t *testing.T) {
	cert, err := gmtls.LoadX509KeyPair(authFileCert, authFileKey)
	if err != nil {
		t.Fatal(err)
	}
	priv, ok := cert.PrivateKey.(*sm2.PrivateKey)
	if !ok {
		t.Fatal("tls: certificate private key does not implement crypto.Decrypter")
		return
	}
	//msg := []byte("123456")
	//
	//msgHex := hex.EncodeToString(msg)
	//fmt.Printf("msg hex text = %v\n", msgHex)

	msg, err := hex.DecodeString("29609fb61f34fe9b207716c7d56cf05200a7d411a2d7c0e739af72b5db0104f7")

	sign, err := priv.Sign(rand.Reader, msg, nil) // 签名
	if err != nil {
		t.Fatal(err)
	}

	signHex := hex.EncodeToString(sign)
	fmt.Printf("sign hex text = %v\n", signHex)

	signdata, err := hex.DecodeString(signHex)

	pubKey := priv.PublicKey
	ok = pubKey.Verify(msg, signdata) // 公钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}

	/*ok = priv.PublicKey.Verify(msg, signdata) // 密钥验证
	if ok {
		fmt.Printf("Verify ok\n")
	} else {
		fmt.Printf("Verify error\n")
	}*/

}
